#! /usr/bin/env python
# encoding: utf-8

from sklearn.mixture import GMM
import numpy

class modifiedGMM(GMM):
    def __init__(self,n_components, covariance_type ='diag'):
        try:
		GMM.__init__(self, n_components=n_components, covariance_type=covariance_type)
	except:		
		GMM.__init__(self, n_components=n_components, cvtype=covariance_type)

        self.attributes = {}
    
    def __setitem__(self,key,value):
        self.attributes[key] = value
    
    def __getitem__(self,key):
        try:
            value = self.attributes[key]
        except:
            value = None
        finally:
            return value


    def loglikelihood(self,obs):
	X = self['normalizer'].transform(obs)
	s = self._covars
	u = self._means
	w = self.weights
	M = self.n_components

	N,D = numpy.shape(X)	

	loglikelihood = 0.
	for n in range(N):
		pgmm = 0.
		for m in range(M):
			p = 0.
			c = (2.*numpy.pi)**D
			for d in range(D):
				c *= s[m][d]
				p += ((X[n][d]-u[m][d])**2.)/s[m][d]
			p = numpy.exp(-p)/numpy.sqrt(c)
			pgmm += w[m]*p
		loglikelihood += numpy.log(pgmm)
	return loglikelihood/N

